name: Terraform Release

# https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
on: 
  workflow_call:
    # see: https://docs.github.com/en/actions/using-workflows/reusing-workflows#passing-inputs-and-secrets-to-a-reusable-workflow
    inputs: 
      TF_STATE_KEY:
        description: Path, including filename, of the Terraform state file to use. If not specified, Terraform will be initialized without any values being passed into the backend configuration.
        required: false
        type: string
      TF_APPLY:
        description: Flag to signal that Terraform should deploy the generated plan. Without this flag, this workflow will only validate the plan; it will not actually create any resources.
        required: false
        type: boolean 
        default: false
    # see: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callsecrets
    secrets:
      AWS_IAM_USER:
        required: true
        description: IAM username of the AWS service account
      AWS_ACCESS_KEY_ID:
        required: true
        description: Access key ID of the AWS service account
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: Secret access key of the AWS service account
      AWS_DEFAULT_REGION:
        required: true
        description: Default region of the AWS service account
      TF_ENV:
        required: false
        description: JSON string with key-value pairs for TF_VAR environment variables.
        
jobs:
  release:
    name: terraform release
    runs-on: ubuntu-latest
    permissions:
      issues: write
    env:
      # see:
        # {{ secrets }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#secrets-context
        # {{ github }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
        # {{ inputs }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context
      AWS_IAM_USER: ${{ secrets.AWS_IAM_USER }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_ENV: ${{ secrets.TF_ENV }}
      TF_STATE_KEY: ${{ inputs.TF_STATE_KEY }}
      TF_VERSION: 1.5.0

    steps:
      - name: system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      # see: 
        # GITHUB_ENV: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        # TF_PLUGIN_CACHE_DIR: https://www.terraform.io/cli/config/config-file#provider-plugin-cache
        # TF_ENV unpacking: https://stackoverflow.com/questions/48512914/exporting-json-to-environment-variables
      - name: environment
        run: |
          echo "PATH=$(pwd)/bin:$PATH" >> $GITHUB_ENV
          echo "TF_PLUGIN_CACHE_DIR=$(pwd)/plugins" >> $GITHUB_ENV
          for s in $(echo $TF_ENV | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s" >> $GITHUB_ENV
          done

      # see: https://github.com/actions/checkout
      - name: checkout
        uses: actions/checkout@v3

      # see: https://github.com/actions/cache
      - name: terraform cache
        id: cache_terraform
        uses: actions/cache@v3
        with:
          path: $${{ env.GITHUB_WORKSPACE }}/bin
          key: ${{ github.repository }}-${{ env.TF_VERSION }}-tf

      - name: plugin cache
        id: cache_terraform_plugins
        uses: actions/cache@v3
        with:
          path: $${{ env.GITHUB_WORKSPACE }}/plugins
          key: ${{ github.repository }}-${{ hashFiles('terraform.tf')}}-tf-plugins

      # NOTE: manual install to make caching easier
      - name: job dependencies
        if: steps.cache_terraform.outputs.cache-hit != 'true'
        run: |
          wget \
            -O tf.zip \
            https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          unzip tf.zip
          if [ ! -d "bin" ]; then
            mkdir bin
          fi
          mv terraform bin/

      - name: configure backend and initialize plugins
        if: steps.cache_terraform_plugins.cache-hit != 'true' && github.event.inputs.TF_STATE_KEY != ''
        run: |
          if [ ! -d "plugins" ]; then
            mkdir plugins
          fi 
          terraform init \
            -input=false \
            -backend-config="key=${TF_STATE_KEY}"

      - name: initialize plugins
        if: steps.cache_terraform_plugins.cache-hit != 'true' && github.event.inputs.TF_STATE_KEY == ''
        run: |
          if [ ! -d "plugins" ]; then
            mkdir plugins
          fi
          terraform init \
            -input=false

      - name: plan 
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -out=$(pwd)/plan
          
      - uses: trstringer/manual-approval@v1
        if: github.event_name == 'pull_request' && github.events.inputs.TF_APPLY
        with:
          secret: ${{ github.TOKEN }}
          approvers: chinchalinchin
          minimum-approvals: 1
          issue-title: "Deploying to the AWS cloud"
          issue-body: "Please approve or deny the deployment."

      - name: apply
        if: github.event_name == 'pull_request' && github.events.inputs.TF_APPLY
        run: |
          terraform apply \
            -no-color \
            -input=false \
            -auto-approve \
            $(pwd)/plan
